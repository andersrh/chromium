diff -up chromium-113.0.5672.63/components/version_info/version_info.h.me chromium-113.0.5672.63/components/version_info/version_info.h
--- chromium-113.0.5672.63/components/version_info/version_info.h.me	2023-05-04 09:11:37.195903527 +0200
+++ chromium-113.0.5672.63/components/version_info/version_info.h	2023-05-04 10:34:52.213681698 +0200
@@ -27,18 +27,18 @@ const std::string GetProductNameAndVersi
     const std::string& build_version);
 
 // Returns the product name, e.g. "Chromium" or "Google Chrome".
-constexpr std::string GetProductName() {
+std::string GetProductName() {
   return PRODUCT_NAME;
 }
 
 // Returns the version number, e.g. "6.0.490.1".
-constexpr std::string GetVersionNumber() {
+std::string GetVersionNumber() {
   return PRODUCT_VERSION;
 }
 
 // Returns the product name and version information for the User-Agent header,
 // in the format: Chrome/<major_version>.<minor_version>.<build>.<patch>.
-constexpr std::string GetProductNameAndVersionForUserAgent() {
+std::string GetProductNameAndVersionForUserAgent() {
   return "Chrome/" + GetVersionNumber();
 }
 
@@ -53,19 +53,19 @@ std::string GetMajorVersionNumber();
 const base::Version& GetVersion();
 
 // Returns a version control specific identifier of this release.
-constexpr std::string GetLastChange() {
+std::string GetLastChange() {
   return LAST_CHANGE;
 }
 
 // Returns whether this is an "official" release of the current version, i.e.
 // whether knowing GetVersionNumber() is enough to completely determine what
 // GetLastChange() is.
-constexpr bool IsOfficialBuild() {
+bool IsOfficialBuild() {
   return IS_OFFICIAL_BUILD;
 }
 
 // Returns the OS type, e.g. "Windows", "Linux", "FreeBSD", ...
-constexpr std::string GetOSType() {
+std::string GetOSType() {
 #if BUILDFLAG(IS_WIN)
   return "Windows";
 #elif BUILDFLAG(IS_IOS)
@@ -97,7 +97,7 @@ constexpr std::string GetOSType() {
 
 // Returns a string equivalent of |channel|, independent of whether the build
 // is branded or not and without any additional modifiers.
-constexpr std::string GetChannelString(Channel channel) {
+std::string GetChannelString(Channel channel) {
   switch (channel) {
     case Channel::STABLE:
       return "stable";
@@ -114,7 +114,7 @@ constexpr std::string GetChannelString(C
 }
 
 // Returns a list of sanitizers enabled in this build.
-constexpr std::string GetSanitizerList() {
+std::string GetSanitizerList() {
   return ""
 #if defined(ADDRESS_SANITIZER)
          "address "
